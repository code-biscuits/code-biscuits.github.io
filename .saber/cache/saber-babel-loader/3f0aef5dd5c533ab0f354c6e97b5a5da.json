{"ast":null,"code":"import _regeneratorRuntime from \"/Users/cmgriffing/code-biscuits.github.io/node_modules/@babel/runtime/regenerator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport default (function (_ref) {\n  var router = _ref.router;\n\n  if (process.browser) {\n    var normalizeTransition = function normalizeTransition(transition, to, from) {\n      if (typeof transition === 'function') {\n        transition = transition(to, from);\n      } else if (typeof transition === 'string') {\n        transition = {\n          name: transition\n        };\n      }\n\n      return transition;\n    };\n\n    var getTransition = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(route, args) {\n        var RouteComponent, routeTransition, layoutTransition, layouts, LayoutComponent;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!route || !route.matched.length || !route.matched[0].components[\"default\"])) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                // The default router component\n                RouteComponent = route.matched[0].components[\"default\"]; // Resolve async component\n\n                if (!(typeof RouteComponent === 'function')) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return RouteComponent();\n\n              case 6:\n                RouteComponent = _context.sent;\n\n              case 7:\n                // ES compat\n                RouteComponent = RouteComponent[\"default\"] || RouteComponent;\n                routeTransition = normalizeTransition.apply(void 0, [RouteComponent.transition].concat(_toConsumableArray(args)));\n\n                if (RouteComponent.layout) {\n                  layouts = router.app.$options.layouts;\n                  LayoutComponent = layouts[RouteComponent.layout] || layouts[\"default\"];\n\n                  if (LayoutComponent) {\n                    layoutTransition = normalizeTransition.apply(void 0, [LayoutComponent.transition].concat(_toConsumableArray(args)));\n                  }\n                }\n\n                return _context.abrupt(\"return\", Object.assign({\n                  name: 'page',\n                  mode: 'out-in'\n                }, routeTransition || layoutTransition));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getTransition(_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    router.beforeEach( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, from, next) {\n        var _yield$Promise$all, _yield$Promise$all2, toTransition, fromTransition, _i2, _Object$keys, key;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all([getTransition(to, [to, from]), getTransition(from, [to, from])]);\n\n              case 2:\n                _yield$Promise$all = _context2.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                toTransition = _yield$Promise$all2[0];\n                fromTransition = _yield$Promise$all2[1];\n\n                if (fromTransition) {\n                  for (_i2 = 0, _Object$keys = Object.keys(fromTransition); _i2 < _Object$keys.length; _i2++) {\n                    key = _Object$keys[_i2];\n\n                    // prefer `leave` transitions of 'from' route\n                    if (/leave/i.test(key)) {\n                      toTransition[key] = fromTransition[key];\n                    }\n                  }\n                }\n\n                router.app.setTransition(toTransition);\n                next();\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n});","map":null,"metadata":{},"sourceType":"module"}