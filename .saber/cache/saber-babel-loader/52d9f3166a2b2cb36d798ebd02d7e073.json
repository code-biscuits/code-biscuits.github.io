{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default {\n  name: 'LayoutManager',\n  functional: true,\n  inject: ['layouts'],\n\n  render(h, {\n    injections: {\n      layouts\n    },\n    parent,\n    scopedSlots\n  }) {\n    const page = parent.$page;\n    const {\n      layout,\n      isVueSFC\n    } = parent.$options;\n    const {\n      component: componentSlot,\n      default: defaultSlot\n    } = scopedSlots;\n    const attrs = {\n      props: {\n        page\n      }\n    };\n\n    const wrapSlot = slot => {\n      const {\n        markPageContent\n      } = parent.$ssrContext || {};\n\n      if (markPageContent) {\n        const result = h('div', null, [markPageContent[0]].concat(slot, markPageContent[1]));\n        return Array.isArray(slot) ? [result] : result;\n      }\n\n      return slot;\n    };\n\n    if (typeof layout !== 'string') {\n      return componentSlot ? wrapSlot(componentSlot(attrs.props)) : h('div', _objectSpread(_objectSpread({}, attrs), {}, {\n        class: '_saber-page'\n      }), wrapSlot(defaultSlot ? defaultSlot() : undefined));\n    }\n\n    const LayoutComponent = layouts[layout] || layouts.default;\n\n    if (!LayoutComponent) {\n      console.error(`Cannot find layout component \"${layout}\" in `, layouts);\n    }\n\n    return h(LayoutComponent, attrs, wrapSlot(componentSlot ? componentSlot(attrs.props) : defaultSlot ? defaultSlot() : undefined));\n  }\n\n};","map":{"version":3,"sources":["LayoutManager.vue"],"names":[],"mappings":";;;;;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,UAAA,EAAA,IAFA;AAGA,EAAA,MAAA,EAAA,CAAA,SAAA,CAHA;;AAIA,EAAA,MAAA,CACA,CADA,EAEA;AACA,IAAA,UAAA,EAAA;AAAA,MAAA;AAAA,KADA;AAEA,IAAA,MAFA;AAGA,IAAA;AAHA,GAFA,EAOA;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,KAAA;AACA,UAAA;AAAA,MAAA,MAAA;AAAA,MAAA;AAAA,QAAA,MAAA,CAAA,QAAA;AACA,UAAA;AAAA,MAAA,SAAA,EAAA,aAAA;AAAA,MAAA,OAAA,EAAA;AAAA,QAAA,WAAA;AAEA,UAAA,KAAA,GAAA;AAAA,MAAA,KAAA,EAAA;AAAA,QAAA;AAAA;AAAA,KAAA;;AAEA,UAAA,QAAA,GAAA,IAAA,IAAA;AACA,YAAA;AAAA,QAAA;AAAA,UAAA,MAAA,CAAA,WAAA,IAAA,EAAA;;AACA,UAAA,eAAA,EAAA;AACA,cAAA,MAAA,GAAA,CAAA,CAAA,KAAA,EAAA,IAAA,EAAA,CAAA,eAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,eAAA,KAAA,CAAA,OAAA,CAAA,IAAA,IAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA;;AACA,aAAA,IAAA;AACA,KAPA;;AASA,QAAA,OAAA,MAAA,KAAA,QAAA,EAAA;AACA,aAAA,aAAA,GACA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CADA,GAEA,CAAA,CACA,KADA,kCAGA,KAHA;AAIA,QAAA,KAAA,EAAA;AAJA,UAMA,QAAA,CAAA,WAAA,GAAA,WAAA,EAAA,GAAA,SAAA,CANA,CAFA;AAUA;;AAEA,UAAA,eAAA,GAAA,OAAA,CAAA,MAAA,CAAA,IAAA,OAAA,CAAA,OAAA;;AAEA,QAAA,CAAA,eAAA,EAAA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,iCAAA,MAAA,OAAA,EAAA,OAAA;AACA;;AAEA,WAAA,CAAA,CACA,eADA,EAEA,KAFA,EAGA,QAAA,CACA,aAAA,GACA,aAAA,CAAA,KAAA,CAAA,KAAA,CADA,GAEA,WAAA,GACA,WAAA,EADA,GAEA,SALA,CAHA,CAAA;AAWA;;AAzDA,CAAA","sourcesContent":["<script>\nexport default {\n  name: 'LayoutManager',\n  functional: true,\n  inject: ['layouts'],\n  render(\n    h,\n    {\n      injections: { layouts },\n      parent,\n      scopedSlots\n    }\n  ) {\n    const page = parent.$page\n    const { layout, isVueSFC } = parent.$options\n    const { component: componentSlot, default: defaultSlot } = scopedSlots\n\n    const attrs = { props: { page } }\n\n    const wrapSlot = slot => {\n      const { markPageContent } = parent.$ssrContext || {}\n      if (markPageContent) {\n        const result = h('div', null, [markPageContent[0]].concat(slot, markPageContent[1]))\n        return Array.isArray(slot)? [result] : result\n      }\n      return slot\n    }\n\n    if (typeof layout !== 'string') {\n      return componentSlot\n        ? wrapSlot(componentSlot(attrs.props))\n        : h(\n            'div',\n            {\n              ...attrs,\n              class: '_saber-page'\n            },\n            wrapSlot(defaultSlot ? defaultSlot() : undefined)\n          )\n    }\n\n    const LayoutComponent = layouts[layout] || layouts.default\n\n    if (!LayoutComponent) {\n      console.error(`Cannot find layout component \"${layout}\" in `, layouts)\n    }\n\n    return h(\n      LayoutComponent,\n      attrs,\n      wrapSlot(\n        componentSlot\n          ? componentSlot(attrs.props)\n          : defaultSlot\n          ? defaultSlot()\n          : undefined\n      )\n    )\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/saber/vue-app/components"},"metadata":{},"sourceType":"module"}