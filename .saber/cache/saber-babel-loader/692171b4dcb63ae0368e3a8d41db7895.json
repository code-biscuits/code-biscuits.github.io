{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport isAbsoluteUrl from '../utils/is-absolute-url';\n\nconst setAttribute = (attrs, name, value) => {\n  if (attrs[name] === undefined) {\n    attrs[name] = value;\n  }\n};\n\nconst HTTP_RE = /^https?:\\/\\//;\nexport default {\n  name: 'SaberLink',\n  functional: true,\n\n  render(h, {\n    data,\n    children,\n    parent\n  }) {\n    const attrs = _objectSpread({}, data.attrs);\n\n    const isExternal = typeof attrs.to === 'string' && isAbsoluteUrl(attrs.to);\n    let tag = 'a';\n\n    if (isExternal) {\n      if (HTTP_RE.test(attrs.to)) {\n        setAttribute(attrs, 'rel', 'noopener noreferrer');\n\n        if (attrs.openLinkInNewTab !== false) {\n          setAttribute(attrs, 'target', '_blank');\n        }\n      }\n\n      attrs.href = attrs.to;\n      delete attrs.to;\n    } else if (typeof attrs.to === 'string') {\n      const link = parent.$saber.getPageLink(attrs.to);\n\n      if (link) {\n        tag = 'router-link';\n        attrs.to = link;\n      } else {\n        attrs.href = attrs.to;\n        delete attrs.to;\n      }\n    } else {\n      tag = 'router-link';\n      const {\n        route\n      } = parent.$router.resolve(attrs.to);\n      attrs.to = parent.$saber.getPageLink(route.fullPath);\n    }\n\n    delete attrs.openLinkInNewTab;\n    return h(tag, _objectSpread(_objectSpread({}, data), {}, {\n      attrs\n    }), children);\n  }\n\n};","map":{"version":3,"sources":["/Users/cmgriffing/code-biscuits.github.io/node_modules/saber/vue-app/components/SaberLink.js"],"names":["isAbsoluteUrl","setAttribute","attrs","name","value","undefined","HTTP_RE","functional","render","h","data","children","parent","isExternal","to","tag","test","openLinkInNewTab","href","link","$saber","getPageLink","route","$router","resolve","fullPath"],"mappings":";;;;;;AAAA,OAAOA,aAAP,MAA0B,0BAA1B;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,KAAwB;AAC3C,MAAIF,KAAK,CAACC,IAAD,CAAL,KAAgBE,SAApB,EAA+B;AAC7BH,IAAAA,KAAK,CAACC,IAAD,CAAL,GAAcC,KAAd;AACD;AACF,CAJD;;AAMA,MAAME,OAAO,GAAG,cAAhB;AAEA,eAAe;AACbH,EAAAA,IAAI,EAAE,WADO;AAGbI,EAAAA,UAAU,EAAE,IAHC;;AAKbC,EAAAA,MAAM,CAACC,CAAD,EAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAAJ,EAAgC;AACpC,UAAMV,KAAK,qBAAQQ,IAAI,CAACR,KAAb,CAAX;;AACA,UAAMW,UAAU,GAAG,OAAOX,KAAK,CAACY,EAAb,KAAoB,QAApB,IAAgCd,aAAa,CAACE,KAAK,CAACY,EAAP,CAAhE;AACA,QAAIC,GAAG,GAAG,GAAV;;AAEA,QAAIF,UAAJ,EAAgB;AACd,UAAIP,OAAO,CAACU,IAAR,CAAad,KAAK,CAACY,EAAnB,CAAJ,EAA4B;AAC1Bb,QAAAA,YAAY,CAACC,KAAD,EAAQ,KAAR,EAAe,qBAAf,CAAZ;;AAEA,YAAIA,KAAK,CAACe,gBAAN,KAA2B,KAA/B,EAAsC;AACpChB,UAAAA,YAAY,CAACC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,CAAZ;AACD;AACF;;AAEDA,MAAAA,KAAK,CAACgB,IAAN,GAAahB,KAAK,CAACY,EAAnB;AACA,aAAOZ,KAAK,CAACY,EAAb;AACD,KAXD,MAWO,IAAI,OAAOZ,KAAK,CAACY,EAAb,KAAoB,QAAxB,EAAkC;AACvC,YAAMK,IAAI,GAAGP,MAAM,CAACQ,MAAP,CAAcC,WAAd,CAA0BnB,KAAK,CAACY,EAAhC,CAAb;;AACA,UAAIK,IAAJ,EAAU;AACRJ,QAAAA,GAAG,GAAG,aAAN;AACAb,QAAAA,KAAK,CAACY,EAAN,GAAWK,IAAX;AACD,OAHD,MAGO;AACLjB,QAAAA,KAAK,CAACgB,IAAN,GAAahB,KAAK,CAACY,EAAnB;AACA,eAAOZ,KAAK,CAACY,EAAb;AACD;AACF,KATM,MASA;AACLC,MAAAA,GAAG,GAAG,aAAN;AACA,YAAM;AAAEO,QAAAA;AAAF,UAAYV,MAAM,CAACW,OAAP,CAAeC,OAAf,CAAuBtB,KAAK,CAACY,EAA7B,CAAlB;AACAZ,MAAAA,KAAK,CAACY,EAAN,GAAWF,MAAM,CAACQ,MAAP,CAAcC,WAAd,CAA0BC,KAAK,CAACG,QAAhC,CAAX;AACD;;AAED,WAAOvB,KAAK,CAACe,gBAAb;AAEA,WAAOR,CAAC,CACNM,GADM,kCAGDL,IAHC;AAIJR,MAAAA;AAJI,QAMNS,QANM,CAAR;AAQD;;AA9CY,CAAf","sourcesContent":["import isAbsoluteUrl from '../utils/is-absolute-url'\n\nconst setAttribute = (attrs, name, value) => {\n  if (attrs[name] === undefined) {\n    attrs[name] = value\n  }\n}\n\nconst HTTP_RE = /^https?:\\/\\//\n\nexport default {\n  name: 'SaberLink',\n\n  functional: true,\n\n  render(h, { data, children, parent }) {\n    const attrs = { ...data.attrs }\n    const isExternal = typeof attrs.to === 'string' && isAbsoluteUrl(attrs.to)\n    let tag = 'a'\n\n    if (isExternal) {\n      if (HTTP_RE.test(attrs.to)) {\n        setAttribute(attrs, 'rel', 'noopener noreferrer')\n\n        if (attrs.openLinkInNewTab !== false) {\n          setAttribute(attrs, 'target', '_blank')\n        }\n      }\n\n      attrs.href = attrs.to\n      delete attrs.to\n    } else if (typeof attrs.to === 'string') {\n      const link = parent.$saber.getPageLink(attrs.to)\n      if (link) {\n        tag = 'router-link'\n        attrs.to = link\n      } else {\n        attrs.href = attrs.to\n        delete attrs.to\n      }\n    } else {\n      tag = 'router-link'\n      const { route } = parent.$router.resolve(attrs.to)\n      attrs.to = parent.$saber.getPageLink(route.fullPath)\n    }\n\n    delete attrs.openLinkInNewTab\n\n    return h(\n      tag,\n      {\n        ...data,\n        attrs\n      },\n      children\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}