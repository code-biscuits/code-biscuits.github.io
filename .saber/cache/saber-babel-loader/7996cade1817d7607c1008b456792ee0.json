{"ast":null,"code":"// eslint-disable\n// Extracted from https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/master/src/es6/path.js\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n} // Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\n\n\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n\nconst splitPath = function (filename) {\n  return splitPathRe.exec(filename).slice(1);\n}; // path.normalize(path)\n// posix version\n\n\nfunction normalize(path) {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.substr(-1) === '/'; // Normalize the path\n\n  path = normalizeArray(path.split('/').filter(Boolean), !isPathAbsolute).join('/');\n\n  if (!path && !isPathAbsolute) {\n    path = '.';\n  }\n\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + path;\n} // posix version\n\n\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n} // posix version\n\n\nfunction join(...paths) {\n  return normalize(paths.filter(p => typeof p === 'string').join('/'));\n}\n\nfunction dirname(path) {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexport { dirname, join };","map":{"version":3,"sources":["/Users/cmgriffing/code-biscuits.github.io/node_modules/saber/vue-app/helpers/path.js"],"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","normalize","path","isPathAbsolute","isAbsolute","trailingSlash","substr","split","filter","Boolean","join","charAt","paths","p","dirname","result","root","dir"],"mappings":"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","sourcesContent":["// eslint-disable\n// Extracted from https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/master/src/es6/path.js\n\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i]\n    if (last === '.') {\n      parts.splice(i, 1)\n    } else if (last === '..') {\n      parts.splice(i, 1)\n      up++\n    } else if (up) {\n      parts.splice(i, 1)\n      up--\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..')\n    }\n  }\n\n  return parts\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/\nconst splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1)\n}\n\n// path.normalize(path)\n// posix version\nfunction normalize(path) {\n  const isPathAbsolute = isAbsolute(path)\n  const trailingSlash = path.substr(-1) === '/'\n\n  // Normalize the path\n  path = normalizeArray(path.split('/').filter(Boolean), !isPathAbsolute).join(\n    '/'\n  )\n\n  if (!path && !isPathAbsolute) {\n    path = '.'\n  }\n\n  if (path && trailingSlash) {\n    path += '/'\n  }\n\n  return (isPathAbsolute ? '/' : '') + path\n}\n\n// posix version\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/'\n}\n\n// posix version\nfunction join(...paths) {\n  return normalize(paths.filter(p => typeof p === 'string').join('/'))\n}\n\nfunction dirname(path) {\n  const result = splitPath(path)\n  const root = result[0]\n  let dir = result[1]\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.'\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1)\n  }\n\n  return root + dir\n}\n\nexport { dirname, join }\n"]},"metadata":{},"sourceType":"module"}