{"ast":null,"code":"export default (({\n  router\n}) => {\n  if (process.browser) {\n    function normalizeTransition(transition, to, from) {\n      if (typeof transition === 'function') {\n        transition = transition(to, from);\n      } else if (typeof transition === 'string') {\n        transition = {\n          name: transition\n        };\n      }\n\n      return transition;\n    }\n\n    async function getTransition(route, args) {\n      if (!route || !route.matched.length || !route.matched[0].components.default) {\n        return;\n      } // The default router component\n\n\n      let RouteComponent = route.matched[0].components.default; // Resolve async component\n\n      if (typeof RouteComponent === 'function') {\n        RouteComponent = await RouteComponent();\n      } // ES compat\n\n\n      RouteComponent = RouteComponent.default || RouteComponent;\n      const routeTransition = normalizeTransition(RouteComponent.transition, ...args);\n      let layoutTransition;\n\n      if (RouteComponent.layout) {\n        const {\n          layouts\n        } = router.app.$options;\n        const LayoutComponent = layouts[RouteComponent.layout] || layouts.default;\n\n        if (LayoutComponent) {\n          layoutTransition = normalizeTransition(LayoutComponent.transition, ...args);\n        }\n      }\n\n      return Object.assign({\n        name: 'page',\n        mode: 'out-in'\n      }, routeTransition || layoutTransition);\n    }\n\n    router.beforeEach(async (to, from, next) => {\n      const [toTransition, fromTransition] = await Promise.all([getTransition(to, [to, from]), getTransition(from, [to, from])]);\n\n      if (fromTransition) {\n        for (const key of Object.keys(fromTransition)) {\n          // prefer `leave` transitions of 'from' route\n          if (/leave/i.test(key)) {\n            toTransition[key] = fromTransition[key];\n          }\n        }\n      }\n\n      router.app.setTransition(toTransition);\n      next();\n    });\n  }\n});","map":{"version":3,"sources":["/Users/cmgriffing/code-biscuits.github.io/node_modules/saber/vue-app/helpers/set-transition.js"],"names":["router","process","browser","normalizeTransition","transition","to","from","name","getTransition","route","args","matched","length","components","default","RouteComponent","routeTransition","layoutTransition","layout","layouts","app","$options","LayoutComponent","Object","assign","mode","beforeEach","next","toTransition","fromTransition","Promise","all","key","keys","test","setTransition"],"mappings":"AAAA,gBAAe,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAgB;AAC7B,MAAIC,OAAO,CAACC,OAAZ,EAAqB;AACnB,aAASC,mBAAT,CAA6BC,UAA7B,EAAyCC,EAAzC,EAA6CC,IAA7C,EAAmD;AACjD,UAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpCA,QAAAA,UAAU,GAAGA,UAAU,CAACC,EAAD,EAAKC,IAAL,CAAvB;AACD,OAFD,MAEO,IAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AACzCA,QAAAA,UAAU,GAAG;AAAEG,UAAAA,IAAI,EAAEH;AAAR,SAAb;AACD;;AAED,aAAOA,UAAP;AACD;;AAED,mBAAeI,aAAf,CAA6BC,KAA7B,EAAoCC,IAApC,EAA0C;AACxC,UACE,CAACD,KAAD,IACA,CAACA,KAAK,CAACE,OAAN,CAAcC,MADf,IAEA,CAACH,KAAK,CAACE,OAAN,CAAc,CAAd,EAAiBE,UAAjB,CAA4BC,OAH/B,EAIE;AACA;AACD,OAPuC,CASxC;;;AACA,UAAIC,cAAc,GAAGN,KAAK,CAACE,OAAN,CAAc,CAAd,EAAiBE,UAAjB,CAA4BC,OAAjD,CAVwC,CAWxC;;AACA,UAAI,OAAOC,cAAP,KAA0B,UAA9B,EAA0C;AACxCA,QAAAA,cAAc,GAAG,MAAMA,cAAc,EAArC;AACD,OAduC,CAgBxC;;;AACAA,MAAAA,cAAc,GAAGA,cAAc,CAACD,OAAf,IAA0BC,cAA3C;AAEA,YAAMC,eAAe,GAAGb,mBAAmB,CACzCY,cAAc,CAACX,UAD0B,EAEzC,GAAGM,IAFsC,CAA3C;AAKA,UAAIO,gBAAJ;;AACA,UAAIF,cAAc,CAACG,MAAnB,EAA2B;AACzB,cAAM;AAAEC,UAAAA;AAAF,YAAcnB,MAAM,CAACoB,GAAP,CAAWC,QAA/B;AACA,cAAMC,eAAe,GACnBH,OAAO,CAACJ,cAAc,CAACG,MAAhB,CAAP,IAAkCC,OAAO,CAACL,OAD5C;;AAEA,YAAIQ,eAAJ,EAAqB;AACnBL,UAAAA,gBAAgB,GAAGd,mBAAmB,CACpCmB,eAAe,CAAClB,UADoB,EAEpC,GAAGM,IAFiC,CAAtC;AAID;AACF;;AAED,aAAOa,MAAM,CAACC,MAAP,CACL;AACEjB,QAAAA,IAAI,EAAE,MADR;AAEEkB,QAAAA,IAAI,EAAE;AAFR,OADK,EAKLT,eAAe,IAAIC,gBALd,CAAP;AAOD;;AAEDjB,IAAAA,MAAM,CAAC0B,UAAP,CAAkB,OAAOrB,EAAP,EAAWC,IAAX,EAAiBqB,IAAjB,KAA0B;AAC1C,YAAM,CAACC,YAAD,EAAeC,cAAf,IAAiC,MAAMC,OAAO,CAACC,GAAR,CAAY,CACvDvB,aAAa,CAACH,EAAD,EAAK,CAACA,EAAD,EAAKC,IAAL,CAAL,CAD0C,EAEvDE,aAAa,CAACF,IAAD,EAAO,CAACD,EAAD,EAAKC,IAAL,CAAP,CAF0C,CAAZ,CAA7C;;AAKA,UAAIuB,cAAJ,EAAoB;AAClB,aAAK,MAAMG,GAAX,IAAkBT,MAAM,CAACU,IAAP,CAAYJ,cAAZ,CAAlB,EAA+C;AAC7C;AACA,cAAI,SAASK,IAAT,CAAcF,GAAd,CAAJ,EAAwB;AACtBJ,YAAAA,YAAY,CAACI,GAAD,CAAZ,GAAoBH,cAAc,CAACG,GAAD,CAAlC;AACD;AACF;AACF;;AAEDhC,MAAAA,MAAM,CAACoB,GAAP,CAAWe,aAAX,CAAyBP,YAAzB;AAEAD,MAAAA,IAAI;AACL,KAlBD;AAmBD;AACF,CA9ED","sourcesContent":["export default ({ router }) => {\n  if (process.browser) {\n    function normalizeTransition(transition, to, from) {\n      if (typeof transition === 'function') {\n        transition = transition(to, from)\n      } else if (typeof transition === 'string') {\n        transition = { name: transition }\n      }\n\n      return transition\n    }\n\n    async function getTransition(route, args) {\n      if (\n        !route ||\n        !route.matched.length ||\n        !route.matched[0].components.default\n      ) {\n        return\n      }\n\n      // The default router component\n      let RouteComponent = route.matched[0].components.default\n      // Resolve async component\n      if (typeof RouteComponent === 'function') {\n        RouteComponent = await RouteComponent()\n      }\n\n      // ES compat\n      RouteComponent = RouteComponent.default || RouteComponent\n\n      const routeTransition = normalizeTransition(\n        RouteComponent.transition,\n        ...args\n      )\n\n      let layoutTransition\n      if (RouteComponent.layout) {\n        const { layouts } = router.app.$options\n        const LayoutComponent =\n          layouts[RouteComponent.layout] || layouts.default\n        if (LayoutComponent) {\n          layoutTransition = normalizeTransition(\n            LayoutComponent.transition,\n            ...args\n          )\n        }\n      }\n\n      return Object.assign(\n        {\n          name: 'page',\n          mode: 'out-in'\n        },\n        routeTransition || layoutTransition\n      )\n    }\n\n    router.beforeEach(async (to, from, next) => {\n      const [toTransition, fromTransition] = await Promise.all([\n        getTransition(to, [to, from]),\n        getTransition(from, [to, from])\n      ])\n\n      if (fromTransition) {\n        for (const key of Object.keys(fromTransition)) {\n          // prefer `leave` transitions of 'from' route\n          if (/leave/i.test(key)) {\n            toTransition[key] = fromTransition[key]\n          }\n        }\n      }\n\n      router.app.setTransition(toTransition)\n\n      next()\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}