{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport isAbsoluteUrl from '../utils/is-absolute-url';\n\nvar setAttribute = function setAttribute(attrs, name, value) {\n  if (attrs[name] === undefined) {\n    attrs[name] = value;\n  }\n};\n\nvar HTTP_RE = /^https?:\\/\\//;\nexport default {\n  name: 'SaberLink',\n  functional: true,\n  render: function render(h, _ref) {\n    var data = _ref.data,\n        children = _ref.children,\n        parent = _ref.parent;\n\n    var attrs = _objectSpread({}, data.attrs);\n\n    var isExternal = typeof attrs.to === 'string' && isAbsoluteUrl(attrs.to);\n    var tag = 'a';\n\n    if (isExternal) {\n      if (HTTP_RE.test(attrs.to)) {\n        setAttribute(attrs, 'rel', 'noopener noreferrer');\n\n        if (attrs.openLinkInNewTab !== false) {\n          setAttribute(attrs, 'target', '_blank');\n        }\n      }\n\n      attrs.href = attrs.to;\n      delete attrs.to;\n    } else if (typeof attrs.to === 'string') {\n      var link = parent.$saber.getPageLink(attrs.to);\n\n      if (link) {\n        tag = 'router-link';\n        attrs.to = link;\n      } else {\n        attrs.href = attrs.to;\n        delete attrs.to;\n      }\n    } else {\n      tag = 'router-link';\n\n      var _parent$$router$resol = parent.$router.resolve(attrs.to),\n          route = _parent$$router$resol.route;\n\n      attrs.to = parent.$saber.getPageLink(route.fullPath);\n    }\n\n    delete attrs.openLinkInNewTab;\n    return h(tag, _objectSpread(_objectSpread({}, data), {}, {\n      attrs: attrs\n    }), children);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}